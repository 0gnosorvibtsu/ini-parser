<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<RootNamespace>IniParser</RootNamespace>
		<AssemblyName>INIFileParser</AssemblyName>
		<Description>A .NET, Mono and Unity3d compatible(*) library for reading/writing INI data from IO streams, file streams, and strings written in C#.

Also implements merging operations, both for complete ini files, sections, or even just a subset of the keys contained by the files.

(*) This library is 100% .NET code and does not have any dependencies on Windows API calls in order to be portable.</Description>
		<Authors>Ricardo Amores Hernández</Authors>
		<PackageProjectUrl>https://github.com/rickyah/ini-parser</PackageProjectUrl>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageIconUrl>https://raw.githubusercontent.com/rickyah/ini-parser/development/nuget-ini-icon.png</PackageIconUrl>
		<Version>2.5.3-sh1</Version>
		<SignAssembly>True</SignAssembly>
		<AssemblyOriginatorKeyFile>Properties\publickey.snk</AssemblyOriginatorKeyFile>
		<OutputType>Library</OutputType>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<PackageTags>ini</PackageTags>
		<PackageId>ini-parser</PackageId>
		<Product>INI Parser</Product>
	</PropertyGroup>

	<!-- Auto-select supported target frameworks based on MSBuild version -->
	<PropertyGroup Condition="'$(MSBuildRuntimeType)'=='Full'">
		<TargetFrameworks>net20;net40;netstandard2.0</TargetFrameworks>
		<!-- Only generate NuGet package for full builds -->
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
	</PropertyGroup>
	<PropertyGroup Condition="('$(OS)'=='Windows_NT' And '$(MSBuildRuntimeType)'=='Core') Or '$(MSBuildRuntimeType)'=='Mono'">
		<TargetFrameworks>net40;netstandard2.0</TargetFrameworks>
	</PropertyGroup>
	<PropertyGroup Condition="'$(MSBuildRuntimeType)'=='Core' And '$(OS)'!='Windows_NT'">
		<TargetFrameworks>netstandard2.0</TargetFrameworks>
	</PropertyGroup>

</Project>